using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;

namespace P1ElGamal
{
   public abstract class ImpExpElGamalParameters : ElGamalParameters
    {
        public abstract void ImportParameters(ElGamalParameters import_parameters);
        public abstract ElGamalParameters ExportParameters(bool export_parameters);
        public abstract byte[] EncryptData(byte[] _data);
        public abstract byte[] DecryptData(byte[] _data);


        public override string ToXmlString(bool _private)
        {
            ElGamalParameters elgamal_params = ExportParameters(_private);
            // create a new string builder
            StringBuilder string_builder = new StringBuilder();
            // add the header
            string_builder.Append("<ElGamalKeyValue>\n\n");
            // add the public elements from the parameters
            string_builder.Append("<P>  " + Convert.ToBase64String(elgamal_params.P) + "  </P>\n\n");
            string_builder.Append("<G>  " + Convert.ToBase64String(elgamal_params.G) + "  </G>\n\n");
            string_builder.Append("<Y>  " + Convert.ToBase64String(elgamal_params.Y) + "  </Y>\n\n");

            if (_private)
            {
                // we need to include X, which is the part of private key
                string_builder.Append("<X>  " + Convert.ToBase64String(elgamal_params.X) + "  </X>\n\n");
            }
            // add the final element
            string_builder.Append("\n\n</ElGamalKeyValue>");
            return string_builder.ToString();
        }

        public override void FromXmlString(String _string)
        {
            // create the params that we will use as the result
            ElGamalParameters elgamal_params = new ElGamalParameters();
            // create a text reader using a string reader
            XmlTextReader xml_text_reader =
                new XmlTextReader(new System.IO.StringReader(_string));

            // run through the elements in the xml string
            while (xml_text_reader.Read())
            {
                // we are only interested in processing start nodes
                if (true || xml_text_reader.IsStartElement())
                {
                    switch (xml_text_reader.Name)
                    {
                        case "P":
                            // set the value for P
                            elgamal_params.P =
                                Convert.FromBase64String(xml_text_reader.ReadString());
                            break;
                        case "G":
                            // set the value for G
                            elgamal_params.G =
                                Convert.FromBase64String(xml_text_reader.ReadString());
                            break;
                        case "Y":
                            // set the value for Y
                            elgamal_params.Y =
                                Convert.FromBase64String(xml_text_reader.ReadString());
                            break;
                        case "X":
                            // set the value for X (this would not be found in a 
                            // string that was generated by excluding the private
                            // elements.
                            elgamal_params.X =
                                Convert.FromBase64String(xml_text_reader.ReadString());
                            break;
                    }
                }
            }
            // Import the result
            ImportParameters(elgamal_params);
        }
    }
}


